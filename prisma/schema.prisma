generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  dni          Int       @id
  lastName     String
  firstName    String
  profiles     Profile[]
  passwordHash String

  messagesRecipient Message[]           @relation("recipient")
  messagesSender    Message[]           @relation("sender")
  resetToken        PasswordResetToken?
}

enum Role {
  Parent
  Teacher
  Student
  Administrator
}

model Profile {
  id    Int    @id @default(autoincrement())
  dni   Int
  user  User   @relation(fields: [dni], references: [dni])
  role  Role
  email String

  administrator Administrator?
  student       Student?
  teacher       Teacher?
  parent        Parent?

  @@unique([dni, role])
}

model Student {
  // extends Profile
  profile               Profile                @relation(fields: [id], references: [id], onDelete: Cascade)
  id                    Int                    @id
  birthdate             DateTime               @default(now())
  phoneNumber           String
  address               String
  parents               Parent[]
  grade                 Grade                  @relation(fields: [gradeName], references: [name])
  gradeName             String
  reprimands            Reprimand[]
  examMarks             ExamMark[]
  assignmentSubmissions AssignmentSubmission[]
  reportCards           ReportCard[]
  attendanceItems       AttendanceItem[]
}

model Parent {
  // extends Profile
  profile         Profile          @relation(fields: [id], references: [id], onDelete: Cascade)
  id              Int              @id
  birthdate       DateTime         @default(now())
  phoneNumber     String
  address         String
  children        Student[]
  signatures      Signature[]
  signatureTokens SignatureToken[]
}

model Teacher {
  // extends Profile
  profile     Profile     @relation(fields: [id], references: [id], onDelete: Cascade)
  id          Int         @id
  phoneNumber String
  address     String
  subjects    Subject[]
  reprimands  Reprimand[]
}

model Administrator {
  // extends Profile
  profile Profile @relation(fields: [id], references: [id])
  id      Int     @id

  phoneNumber String
  address     String
}

model Assignment {
  id          Int                    @id @default(autoincrement())
  title       String
  description String?
  fileUrl     String
  uploadDate  DateTime               @default(now())
  subject     Subject                @relation(fields: [subjectId], references: [id])
  subjectId   Int
  submissions AssignmentSubmission[]
}

model AssignmentSubmission {
  id           Int        @id @default(autoincrement())
  uploadDate   DateTime   @default(now())
  fileUrl      String
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int

  @@unique([studentId, assignmentId])
}

model Grade {
  name             String             @id
  subjects         Subject[]
  students         Student[]
  gradeReportCards GradeReportCards[]
  attendanceData   AttendanceData[]
}

model Subject {
  id                      Int                      @id @default(autoincrement())
  name                    String
  grade                   Grade                    @relation(fields: [gradeName], references: [name])
  gradeName               String
  teachers                Teacher[]
  assignments             Assignment[]
  exams                   Exam[]
  semesterReportCardMarks SemesterReportCardMark[]
  finalReportCardMarks    FinalReportCardMark[]

  @@unique([gradeName, name])
}

model PasswordResetToken {
  token_hash String   @id
  issued_at  DateTime @default(now())
  user       User     @relation(fields: [dni], references: [dni], onDelete: Cascade)
  dni        Int      @unique
  used       Boolean  @default(false)
}

model Reprimand {
  id        Int       @id @default(autoincrement())
  students  Student[]
  message   String
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  teacherId Int
  dateTime  DateTime  @default(now())

  signature      Signature?
  signatureToken SignatureToken?
}

model Exam {
  id        Int        @id @default(autoincrement())
  subject   Subject    @relation(fields: [subjectId], references: [id])
  subjectId Int
  date      DateTime
  marks     ExamMark[]
}

model ExamMark {
  id        Int     @id @default(autoincrement())
  Exam      Exam    @relation(fields: [examId], references: [id])
  examId    Int
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  mark      Int

  signature      Signature?
  signatureToken SignatureToken?

  @@unique([examId, studentId])
}

model ReportCard {
  id      Int     @id @default(autoincrement())
  student Student @relation(fields: [studentId], references: [id])

  studentId           Int
  firstSemesterMarks  SemesterReportCardMark[] @relation("first_semester_marks")
  secondSemesterMarks SemesterReportCardMark[] @relation("second_semester_marks")

  finalMarks       FinalReportCardMark[]
  gradeReportCards GradeReportCards      @relation(fields: [year, gradeName], references: [year, gradeName])

  year      Int
  gradeName String
}

model GradeReportCards {
  year                   Int
  reportCards            ReportCard[]
  grade                  Grade        @relation(fields: [gradeName], references: [name])
  gradeName              String
  firstSemesterReleased  Boolean      @default(false)
  secondSemesterReleased Boolean      @default(false)

  @@id([gradeName, year])
}

model SemesterReportCardMark {
  id                         Int         @id @default(autoincrement())
  reportCardFirstSemester    ReportCard? @relation("first_semester_marks", fields: [reportCardFirstSemesterId], references: [id])
  reportCardSecondSemester   ReportCard? @relation("second_semester_marks", fields: [reportCardSecondSemesterId], references: [id])
  reportCardFirstSemesterId  Int?
  reportCardSecondSemesterId Int?
  subject                    Subject     @relation(fields: [subjectId], references: [id])
  subjectId                  Int
  mark                       Int

  @@unique([reportCardFirstSemesterId, reportCardSecondSemesterId, subjectId])
}

model FinalReportCardMark {
  reportCard   ReportCard @relation(fields: [reportCardId], references: [id])
  reportCardId Int
  subject      Subject    @relation(fields: [subjectId], references: [id])
  subjectId    Int
  mark         String

  @@id([reportCardId, subjectId])
}

model AttendanceData {
  id        Int              @id @default(autoincrement())
  date      DateTime
  grade     Grade            @relation(fields: [gradeName], references: [name])
  gradeName String
  items     AttendanceItem[]

  @@unique([gradeName, date])
}

model AttendanceItem {
  AttendanceData   AttendanceData   @relation(fields: [attendanceDataid], references: [id])
  attendanceDataid Int
  student          Student          @relation(fields: [studentId], references: [id])
  studentId        Int
  status           AttendanceStatus

  @@id([attendanceDataid, studentId])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

model Signature {
  id          Int        @id @default(autoincrement())
  parent      Parent     @relation(fields: [parentId], references: [id])
  parentId    Int
  reprimand   Reprimand? @relation(fields: [reprimandId], references: [id])
  reprimandId Int?       @unique
  examMark    ExamMark?  @relation(fields: [examId], references: [id])
  examId      Int?       @unique
  signedAt    DateTime   @default(now())
}

model SignatureToken {
  id               Int        @id @default(autoincrement())
  token            Int
  issued_at        DateTime   @default(now())
  reprimand        Reprimand? @relation(fields: [reprimandId], references: [id])
  reprimandId      Int?       @unique
  examMark         ExamMark?  @relation(fields: [examMarkId], references: [id])
  examMarkId       Int?       @unique
  parent           Parent     @relation(fields: [parentId], references: [id])
  parentId         Int
  sentSuccessfully Boolean    @default(false)
}

model Message {
  id        Int      @id @default(autoincrement())
  sender    User     @relation("sender", fields: [senderDni], references: [dni])
  recipient User     @relation("recipient", fields: [recipientDni], references: [dni])
  date      DateTime @default(now())
  message   String
  isRead    Boolean  @default(false)

  senderDni    Int
  recipientDni Int
}
