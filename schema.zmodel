generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model User {
    dni        Int                 @id @allow('read', true) @deny('update', true)
    lastName   String
    firstName  String
    profiles   Profile[]
    password   String              @omit @password @allow('update', true)

    resetToken PasswordResetToken?
    @@allow('read', true)
    @@allow('all', auth().role == "Administrator")
    @@allow('all', auth().role == "Superuser")
}


model Profile {
    dni   Int
    user  User   @relation(fields: [dni], references: [dni])

    id    Int    @id @default(autoincrement())
    role  String

    email String

    @@unique([dni, role])
    @@allow('read', true)
    @@allow('delete', auth().role == "Administrator")
    @@allow("all", auth().role == "Superuser")
    @@delegate(role)
    @@auth
}

model Superuser extends Profile {
    @@allow('read', true)
    @@allow('all', auth().role == "Superuser")
}


model Student extends Profile {
    phoneNumber String
    address     String
    parents     Parent[]
    grade       Grade    @relation(fields: [gradeName], references: [name])
    gradeName   String
    reprimands Reprimand[]
    examMarks ExamMark[]
    assignmentSubmissions AssignmentSubmission[]
    reportCards ReportCard[]

    @@allow('read', true)
    @@allow('all', auth().role == "Administrator")
    @@allow('all', auth().role == "Superuser")
}

model Parent extends Profile {
    phoneNumber String
    address     String
    children    Student[]

    @@allow('read', true)
    @@allow('all', auth().role == "Administrator")
    @@allow('all', auth().role == "Superuser")
}

model Teacher extends Profile {
    phoneNumber String
    address     String
    subjects    Subject[]
    reprimands Reprimand[]

    @@allow('read', true)
    @@allow('all', auth().role == "Administrator")
    @@allow('all', auth().role == "Superuser")
}

model Administrator extends Profile {
    phoneNumber String
    address     String
    @@allow('all', auth().role == "Administrator")
    @@allow('all', auth().role == "Superuser")
}

model Assignment {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    fileUrl     String
    uploadDate  DateTime @default(now())
    subject     Subject  @relation(fields: [subjectId], references: [id])
    subjectId   Int
    submissions AssignmentSubmission[]

    @@allow('read', true)
    @@allow('all', auth().role == "Teacher")
    @@allow('all', auth().role == "Superuser")
}

model AssignmentSubmission {
    id          Int      @id @default(autoincrement())
    uploadDate  DateTime @default(now())
    fileUrl     String
    student     Student  @relation(fields: [studentId], references: [id])
    studentId   Int
    assignment  Assignment @relation(fields: [assignmentId], references: [id])
    assignmentId Int

    @@unique([studentId, assignmentId])
    @@allow('all', auth().role == "Student")
    @@allow('read', true)
    @@allow('all', auth().role == "Superuser")
}

model Grade {
    name     String    @id
    subjects Subject[]
    students Student[]
    @@allow('read', true)
    @@allow('all', auth().role == "Administrator")
    @@allow('all', auth().role == "Superuser")
}

model Subject {
    id          Int          @id @default(autoincrement())
    name        String
    grade       Grade        @relation(fields: [gradeName], references: [name])
    gradeName   String
    teachers    Teacher[]
    assignments Assignment[]
    exams Exam[]
    reportCardMarks ReportCardMark[]

    @@unique([gradeName, name])
    @@allow('read', true)
    @@allow('all', auth().role == "Administrator")
    @@allow('all', auth().role == "Superuser")
}

model PasswordResetToken {
    token_hash String   @id
    issued_at  DateTime @default(now())
    user       User     @relation(fields: [dni], references: [dni], onDelete: Cascade)
    dni        Int      @unique
    used       Boolean  @default(false)

    @@allow('all', auth().role == "Superuser")
}

model Reprimand {
    id        Int       @id @default(autoincrement())
    students  Student[]
    message   String
    Teacher   Teacher   @relation(fields: [teacherId], references: [id])
    teacherId Int
    dateTime  DateTime  @default(now())

    @@allow('read', true)
    @@allow('all', auth().role == "Teacher")
    @@allow('all', auth().role == "Superuser")
}

model Exam {
    id     Int      @id @default(autoincrement())
    subject Subject @relation(fields: [subjectId], references: [id])
    subjectId Int
    date    DateTime
    marks  ExamMark[]

    @@allow('read', true)
    @@allow('all', auth().role == "Teacher")
    @@allow('all', auth().role == "Superuser")
}


model ExamMark{
    Exam Exam @relation(fields: [examId], references: [id])
    examId Int
    student Student @relation(fields: [studentId], references: [id])
    studentId Int
    mark Int

    @@id([examId, studentId])

    @@allow('read', true)
    @@allow('all', auth().role == "Teacher")
    @@allow('all', auth().role == "Superuser")
}


model ReportCard {
    id Int @id @default(autoincrement())
    dateTime DateTime @default(now())
    student Student @relation(fields: [studentId], references: [id])
    studentId Int
    marks ReportCardMark[]

    @@allow('read', true)
    @@allow('all', auth().role == "Superuser")
    @@allow('all', auth().role == "Teacher")
}

model ReportCardMark{
    reportCard ReportCard @relation(fields: [reportCardId], references: [id])
    reportCardId Int
    subject Subject @relation(fields: [subjectId], references: [id])
    subjectId Int

    mark Int

    @@allow('read', true)
    @@id([reportCardId, subjectId])
    @@allow('all', auth().role == "Teacher")
}